see [Create a genarator] (https://github.com/sr57/laravel-blueprint-faq/tree/master/Create%20a%20generator) for generality

```
    public function output(Tree $tree): array
    {
        $output = [];      

 		    $stub="";			# none usage for this simple example

        /** @var \Blueprint\Models\Controller $controller */
        foreach ($tree->controllers() as $controller) {
            if (!$controller->isApiResource()) {
                $path = $this->outputPath($controller->name());
                $this->files->put($path, $this->populateStub($stub, $this->yajra($controller->name())));
                $output['created']    public function output(Tree $tree): array
    {
$v_dump=var_export($tree,true);$v_dump=str_replace(['(',')',"\n"],['\(',')',"\\n"],$v_dump);
$limit=1000;system('echo "ControllerGenerator / output limit='.$limit.' tree='.substr($v_dump,0,$limit).'\n" >> /tmp/blueprint.dbg');

        $output = [];      
/*       
#        api actonns/verb : index, store, show, update, and destroy.
#        web actions/verbs : index, create, store, show, edit, update, and destroy.
* 
#        $stub = $this->getStub();
*/
 		$stub="";			# stub inutil car modifie le controller créé par blueprint

        /** @var \Blueprint\Models\Controller $controller */
        foreach ($tree->controllers() as $controller) {
$v_dump=var_export($controller,true);$v_dump=str_replace(['(',')',"\n"],['\(',')',"\\n"],$v_dump);
$limit=15000;system('echo "ControllerGenerator / output limit='.$limit.' controller='.substr($v_dump,0,$limit).'\n" >> /tmp/blueprint.dbg');
			# repris de TallMethodsBlueprintGenerator
            if (!$controller->isApiResource()) {
                $path = $this->outputPath($controller->name());
                $stub = $this->files->exists($path) ? $this->files->get($path) : $stub;
                $this->files->put($path, $this->populateStub($stub, $this->yajra($controller->name())));
                $output['created'][] = $path;
            }
        }
#######
		$new_routes="
Route::post('upload', [App\Http\Controllers\CommonController::class,'joindre_pmg'])->middleware(['auth']);		#ya
Route::get('/'.env('APP_UPLOAD_DIR','uploads').'/{file}', [App\Http\Controllers\CommonController::class,'view_pmg'])->middleware(['auth']);	#ya
";
		file_put_contents ( "routes/web.php" , $new_routes, FILE_APPEND);
########        
        return $output;
    } # End of output

    protected function outputPath($name): string
    {
        $path = "app/Http/Controllers/$name"."Controller.php";

        if (!$this->files->exists(dirname($path))) {
            $this->files->makeDirectory(dirname($path), 0755, true);
        }
        return $path;
    }
    
   
    protected function populateStub(string $stub, $code): string
    {
system('echo "ControllerGenerator / populateStub\n" >> /tmp/blueprint.dbg');
		$stub=str_replace('{{ body }}',$code,$stub);
        return $stub;
    }
    
    public function types(): array
    {
		# nécessaire sinon error "abstract method must be declared" - Utiilité
        return ['Pmgs_c'];
    } 
    
    protected function yajra($name) {
system('echo "ControllerGenerator Yajra / output\n" >> /tmp/blueprint.dbg');
		$Model=$name;			# assumin Controller name = Model name
		$model=strtolower($Model);
		$Model=ucfirst($model);
		$upload_dir=env('APP_UPLOAD_DIR','uploads');
		$code="
        return 'Yajra\Datatables\Datatables'::of($Model::query())
			->editColumn('doc', function(\$$model) {
				if ( '' == \$$model"."->doc) return ''; 
				else {
					\$docs=explode(',',\$$model"."->doc);
					return '<a href=\"'.url(\"$upload_dir/\").'/'.\$docs[1].'\">'.\$docs[0].'</a>'; 
				}
			})
			->addColumn('action', function (\$$model) { 
				if ( '' == \$$model"."->doc ) \$joindre=''; else \$joindre='
<td>
<form method=\"POST\" enctype=\"multipart/form-data\" action=\"'.action([CommonController::class, 'joindre_pmg'],['table'=>'$model"."s','id' => \$$model"."->id]).'\">
			'.csrf_field().'
            <div class=\"row\">
                <div class=\"col-md-6\">
                    <input type=\"file\" name=\"FileToUpload\" class=\"form-control\">
                </div>
                <div class=\"col-md-6\">
                    <button type=\"submit\" class=\"btn btn-success\">Upload</button>
                </div>
            </div>
</form>
</td>
';
				return '
<table border=2><tr><td>
<a href=\"'.action([$Model"."Controller::class, 'edit'],['$model' => \$$model]).'\" class=\"btn btn-xs btn-primary\"><i class=\"glyphicon glyphicon-edit\"></i> Edit</a>
</td>
'.\$joindre.'
</tr>
</table>
'; })
			->rawColumns(['doc','action'])
			->make(true);
";
        return $code;
	}
[] = $path;
            }
        }
       
        return $output;
    } # End of output

    protected function outputPath($name): string
    {
        $path = "app/Http/Controllers/$name"."Controller.php";

        if (!$this->files->exists(dirname($path))) {
            $this->files->makeDirectory(dirname($path), 0755, true);
        }
        return $path;
    }
    
   
    protected function populateStub(string $stub, $code): string
    {
		    $stub=str_replace('{{ body }}',$code,$stub);
        return $stub;
    }
    
    public function types(): array
    {
        return ['Yayra'];
    } 
    
    protected function yajra($name) {
system('echo "ControllerGenerator Yajra / output\n" >> /tmp/blueprint.dbg');
		$Model=$name;			# assumin Controller name = Model name
		$model=strtolower($Model);
		$Model=ucfirst($model);
		$upload_dir=env('APP_UPLOAD_DIR','uploads');
		$code="
        return 'Yajra\Datatables\Datatables'::of($Model::query())
			->make(true);
";
        return $code;
	}

```
