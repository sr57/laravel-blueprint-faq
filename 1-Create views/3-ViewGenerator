src/ViewGenerator.php

<?php
namespace <your_namespace>\Blueprint<your_addon>Addon;

use Blueprint\Contracts\Generator;
use Blueprint\Models\Statements\RenderStatement;
use Blueprint\Tree;

class ViewGenerator implements Generator
{
    /**
     * @var \Illuminate\Contracts\Filesystem\Filesystem
     */
    private $files;

    public function __construct($files)
    {
        $this->files = $files;
    }
	
    protected function stubPath(): string
    {
		return $_SERVER['PWD']."/vendor/<you>/blueprint-<your_addon>-addon/stubs";
    }

    protected function getStub($method): string
    {
       return $this->files->get($this->stubPath() . DIRECTORY_SEPARATOR . "$method.stub");
    }
    
    protected function outputPath($view,$name): string
    {
        $path = "resources/views/".strtolower($name)."/$view.blade.php";

        if (!$this->files->exists(dirname($path))) {
            $this->files->makeDirectory(dirname($path), 0755, true);
        }
        return $path;
    }
		
    public function output(Tree $tree): array
    {
system('echo "Blueprint / statement / ViewGenerator output\n" >> /tmp/blueprint.dbg');
        $output = [];
        foreach ($tree->controllers() as $controller) {
            foreach ($controller->methods() as $method => $statements) {
                foreach ($statements as $statement) {
                    if (! $statement instanceof RenderStatement) {
                        continue;
                    }
					          $model_name = $controller->name();
					          $stub = $this->getStub($method);
					          $path = $this->outputPath($method,$model_name);
					          if ($this->files->exists($path)) {
						          $output['info'][] = "already exists : $path";
						          continue;
					          }	
					          $model=$tree->models[$model_name];			
					          $this->files->put($path, $this->populateStub($method,$stub, $model));
					          $output['created'][] = $path;
                }
            }
        }

        return $output;
    }

    public function types(): array
    {
        return ['controllers', 'views'];
    }

    protected function getPath(string $view)
    {
        return 'resources/views/' . str_replace('.', '/', $view) . '.blade.php';
    }
    
    protected function populateStub($method,string $stub, $model): string
    {
		$Model_name=$model->name();
		$model_name=strtolower($Model_name);
		$head="";$data="";
		foreach ( $model->columns() as $column ) {
			$name=$column->name();
			$type=$column->dataType();
			if ( 'index' == $method ) { 
				$head.="									<th>$name</th>\n";
				$data.="											<td>{{ \$$model_name->$name }}</td>\n"; 
			} else if ( '<method>' == $method ) {
 // to be completed as needed
			} else die("ViewGenerator : unknown method ($method)");                              
		}	
		#
		$stub=preg_replace('/{{{.*?}}}/','',$stub); 		# Comment, everywhere between {{{    }}}
		$stub=str_replace('{{ HEAD }}',$head,$stub);
		$stub=str_replace('{{ Model }}',$Model_name,$stub);
		$stub=str_replace('{{ model }}',$model_name,$stub);
        return $stub;
    }
}
