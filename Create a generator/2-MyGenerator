src/MyGenerator.php

<?php

namespace <my_namespace>\BlueprintMyAddon;

use Blueprint\Contracts\Generator;
use Blueprint\Models\Model;
use Blueprint\Tree;

class MyGenerator implements Generator
{  	
    /** @var \Illuminate\Contracts\Filesystem\Filesystem */
    private $files;

    public function __construct($files)
    {
        $this->files = $files;
    }

    public function output(Tree $tree): array
    {
        $output = [];
        
		// foreach ($tree->controllers() as $controller) {
		  foreach ($tree->models() as $model) {
			      $path = $this->outputPath(<my_view>,$model->name());			
            if ($this->files->exists($path)) {
			        	$output['info'][] = "already exists : $path";
                continue;
            }				
				
			      $this->files->put($path, $this->populateStub(<my_stub>, $model));
			      $output['created'][] = $path;
        }
        return $output;
    }
    
        protected function outputPath($view,$name): string
    {
        $path = "resources/views/".strtolower($name)."/$view".".blade.php";

        if (!$this->files->exists(dirname($path))) {
            $this->files->makeDirectory(dirname($path), 0755, true);
        }
        return $path;
    }    
    
        protected function populateStub(string $stub, Model $model): string
    {
		      $model_name=strtolower($model->name());
		      $head="";$data="";
		      foreach ( $model->columns() as $column ) {
			      $name=$column->name();
			      $head.="									<th>$name</th>\n"; 
			      $data.="											<td>{{ \$$model_name->$name }}</td>\n";                                   
		      }
		      $stub=str_replace('{{ HEAD }}',$head,$stub);
		      $stub=str_replace('{{ MODEL }}',$model_name,$stub);
		      $stub=str_replace('{{ DATA }}',$data,$stub);
          return $stub;
    }
    
    public function types(): array
    {
        return ['blade'];		# file types generated (controllers, ...)
    } 

}
